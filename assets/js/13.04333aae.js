(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{388:function(e,t,a){"use strict";a.r(t);var o=a(46),s=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("!!!")]),e._v(" "),a("p",[e._v("This document has "),a("strong",[e._v("moved")]),e._v(".")]),e._v(" "),a("p",[e._v("You'll now find information like this in the "),a("a",{attrs:{href:"https://github.com/ipld/ipld/",target:"_blank",rel:"noopener noreferrer"}},[e._v("ipld/ipld"),a("OutboundLink")],1),e._v(" meta-repo,\nand published to the web at https://ipld.io/ .")]),e._v(" "),a("p",[e._v("All documentation, fixtures, specifications, and web content is now gathered into that repo.\nPlease update your links, and direct new contributions there.")]),e._v(" "),a("p",[e._v("!!!")]),e._v(" "),a("hr"),e._v(" "),a("h1",{attrs:{id:"getting-things-done-with-ipld"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getting-things-done-with-ipld"}},[e._v("#")]),e._v(" Getting Things Done with IPLD")]),e._v(" "),a("p",[e._v("There are lots of ways to get things done in IPLD.")]),e._v(" "),a("p",[e._v("When designing a new system and trying to decide what parts of IPLD\nyou should use to accomplish your goals, try going down this chart --\nin order: if you can get something done with the things at the top of this file,\ndo that; if you can't, only then should you keep reading down the list to\nthe more invasive and high-effort options that are available.")]),e._v(" "),a("p",[e._v("In order:")]),e._v(" "),a("ol",[a("li",[e._v("Use the Data Model.")]),e._v(" "),a("li",[e._v("Use Schemas.")]),e._v(" "),a("li",[e._v("Use ADLs.")]),e._v(" "),a("li",[e._v("Write a new codec.")])]),e._v(" "),a("h2",{attrs:{id:"use-the-data-model"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#use-the-data-model"}},[e._v("#")]),e._v(" Use the Data Model")]),e._v(" "),a("p",[e._v("You can get lots done with just the "),a("RouterLink",{attrs:{to:"/#data-model"}},[e._v("Data Model")]),e._v(" and core APIs.")],1),e._v(" "),a("p",[e._v("Whenever you want to get something done with IPLD,\nwe suggest you start by just sketching out what you want to do by using the Data Model.\nThis is similar to saying \"just sketch examples of your desired API in JSON\";\nmaybe you'll want more formality to your structure later,\nand maybe you'll want to write more auto-validation rules, etc;\nbut those can come later.")]),e._v(" "),a("h2",{attrs:{id:"use-schemas"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#use-schemas"}},[e._v("#")]),e._v(" Use Schemas")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://specs.ipld.io/schemas/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Schemas"),a("OutboundLink")],1),e._v(" are for when you want to formalize structures.\nThey can be useful for documentation;\nthey do validation of data structures so you know what you're handling;\nthey can be used for version detection and feature detection;\nand with some libraries they can even be used for code generation.")]),e._v(" "),a("p",[e._v("We find that using Schemas is often a good idea.  But you don't have to!\nIf what you want to do is easy enough to accomplish at the Data Model level alone,\nthen go for it.")]),e._v(" "),a("p",[e._v("Schemas are totally compatible with the Data Model approaches to handling data.\nThey just decorate more behaviors onto it.\nAny code that's written to traverse over the regular Data Model-specified interfaces\nwill also be able to traverse over data that's been processed with Schemas.")]),e._v(" "),a("p",[e._v("Schemas can be used to do some very basic transformations of data --\nlike transforming long-form names for fields in data into shorter names\nbefore passing them into or out of serialization -- but that's the extent\nof their powers; they can't do any more dynamic restructuring than that.")]),e._v(" "),a("h2",{attrs:{id:"use-adls"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#use-adls"}},[e._v("#")]),e._v(" Use ADLs")]),e._v(" "),a("p",[a("RouterLink",{attrs:{to:"/advanced-layouts/"}},[e._v("ADLs")]),e._v(" -- Advanced Data Layouts -- are for when you want to present data\n"),a("em",[e._v("as if")]),e._v(" it is IPLD Data Model (so that all the rest of our tools can work over it),\nbut the serialized structure of the data is significantly (topologically) different.")],1),e._v(" "),a("p",[e._v("Examples of things people have wanted to do in the ecosystem which have been\ndone as ADLs include:")]),e._v(" "),a("ul",[a("li",[e._v("large collections, sharded across multiple blocks, but still presenting as a single map or list")]),e._v(" "),a("li",[e._v("large bytes, sharded across multiple blocks, but still presenting as one coherent bytes object")]),e._v(" "),a("li",[e._v("encrypted data, where there's a ciphertext format, and also (conditionally) a cleartext format")])]),e._v(" "),a("p",[e._v("ADLs are an abstraction layer where extremely powerful transformations like\nthose listed above can be implemented... while still reusing existing\nserialization codecs, and while still presenting things as Data Model interfaces\nso that all the same traversal logic that works on either plain Data Model or\non Schema-processed data "),a("em",[e._v("also")]),e._v(" still works on data processed by an ADL.")]),e._v(" "),a("p",[e._v("ADLs are also noteworthy in that (like Schemas), one can always choose to handle\ndata "),a("em",[e._v("without them")]),e._v(", and just handle the raw Data Model contents directly.\nOften this will be less useful... but it can be a good debugging tool,\nand useful for comprehensible and reusable data structure design.")]),e._v(" "),a("h2",{attrs:{id:"write-a-new-codec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#write-a-new-codec"}},[e._v("#")]),e._v(" Write a new Codec")]),e._v(" "),a("p",[e._v("This should be your absolute last resort.")]),e._v(" "),a("p",[e._v("Writing a new "),a("RouterLink",{attrs:{to:"/#codecs"}},[e._v("Codec")]),e._v(" poses future portability questions.\nEvery IPLD library in every programming language will need to implement it;\nmany, practically speaking, won't -- unless you give them a very good reason.\nTherefore, it's best to stick to one of the already widely supported codecs.")],1),e._v(" "),a("p",[e._v("There should also simply be very little reason that you would need to create\na new wire format and a new codec for it.  IPLD Schemas and their mechanisms\nfor customizing representations already make it possible to choose any position\nyou like on the gradient between schemaless (redundant but easy to read)\nand schema-required (densely packed, but impossible to understand without a schema)\ndata... and most new serialization formats are invented because someone wants\nto stake out a new position on that gradient.  Now, you shouldn't have to.")]),e._v(" "),a("p",[e._v("The most typical reason to introduce new codecs is to bridge the IPLD system\nwith some other, existing serialization formats.  That's great, and we\nwelcome (and absolutely designed for) this kind of bridging.\nBut if you're designing a new system that's IPLD from the start,\nwe really recommend using existing codecs.\nIt's just easier to hit the ground running, and there's little value\nand lots of costs to trying to forge your own way through a new codec.")]),e._v(" "),a("h2",{attrs:{id:"but-why"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#but-why"}},[e._v("#")]),e._v(" But Why?")]),e._v(" "),a("p",[e._v("Why are there so many different layers?")]),e._v(" "),a("p",[e._v("Because for standards to be useful and allow people to build an ecosystem of reusable systems together, they have to unify on some things;\nand for standards to be flexible enough to allow people to build things suitable to them and their specific tasks, they have to be extensible.")]),e._v(" "),a("p",[e._v("We have different degrees of unification versus flexibility in each of these layers.\nThat means you can "),a("em",[e._v("choose")]),e._v(" how close of an orbit you want to keep with the rest of the ecosystem.")])])}),[],!1,null,null,null);t.default=s.exports}}]);